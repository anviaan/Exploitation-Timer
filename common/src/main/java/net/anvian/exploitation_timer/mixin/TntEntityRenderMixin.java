package net.anvian.exploitation_timer.mixin;

import com.mojang.blaze3d.vertex.PoseStack;
import net.minecraft.ChatFormatting;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.entity.EntityRenderer;
import net.minecraft.client.renderer.entity.EntityRendererProvider;
import net.minecraft.client.renderer.entity.TntRenderer;
import net.minecraft.network.chat.Component;
import net.minecraft.world.entity.item.PrimedTnt;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Unique;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

import java.text.DecimalFormat;

@Mixin(TntRenderer.class)
public abstract class TntEntityRenderMixin extends EntityRenderer<PrimedTnt> {
    protected TntEntityRenderMixin(EntityRendererProvider.Context context) {
        super(context);
    }

    @Inject(method = "render(Lnet/minecraft/world/entity/item/PrimedTnt;FFLcom/mojang/blaze3d/vertex/PoseStack;Lnet/minecraft/client/renderer/MultiBufferSource;I)V", at = @At(value = "HEAD"))
    private void render(PrimedTnt primedTnt, float f, float g, PoseStack poseStack, MultiBufferSource multiBufferSource, int i, CallbackInfo ci) {
        super.renderNameTag(primedTnt, exploitation_Timer$getTime(primedTnt.getFuse()), poseStack, multiBufferSource, i, g);
    }

    @Unique
    private static final DecimalFormat exploitation_Timer$decimalFormat = new DecimalFormat("0.00");

    @Unique
    private static Component exploitation_Timer$getTime(double ticks) {
        ChatFormatting format = ChatFormatting.WHITE;
        var colored = exploitation_Timer$areChatColors();

        double timing = ticks / 20;

        if (!colored) {
            return Component.nullToEmpty(exploitation_Timer$decimalFormat.format(timing)).copy().withStyle(ChatFormatting.WHITE);
        } else {
            if (timing > 7d) {
                format = ChatFormatting.DARK_AQUA;
            } else if (timing > 6d) {
                format = ChatFormatting.AQUA;
            } else if (timing > 4d) {
                format = ChatFormatting.DARK_GREEN;
            } else if (timing > 3d) {
                format = ChatFormatting.GREEN;
            } else if (timing > 2d) {
                format = ChatFormatting.GOLD;
            } else if (timing > 1d) {
                format = ChatFormatting.RED;
            } else if (timing > 0d) {
                format = ChatFormatting.DARK_RED;
            }
            return Component.nullToEmpty(exploitation_Timer$decimalFormat.format(timing)).copy().withStyle(format);
        }
    }

    @Unique
    private static boolean exploitation_Timer$areChatColors() {
        return Minecraft.getInstance().options.chatColors().get();
    }
}
