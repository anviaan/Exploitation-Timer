package net.anvian.exploitation_timer.mixin;

import com.mojang.blaze3d.vertex.PoseStack;
import net.minecraft.ChatFormatting;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.entity.EntityRenderer;
import net.minecraft.client.renderer.entity.EntityRendererProvider;
import net.minecraft.client.renderer.entity.TntRenderer;
import net.minecraft.network.chat.Component;
import net.minecraft.world.entity.item.PrimedTnt;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Unique;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

import java.text.DecimalFormat;

@Mixin(TntRenderer.class)
public abstract class TntEntityRenderMixin extends EntityRenderer<PrimedTnt> {
    protected TntEntityRenderMixin(EntityRendererProvider.Context context) {
        super(context);
    }

    @Inject(method = "render(Lnet/minecraft/world/entity/item/PrimedTnt;FFLcom/mojang/blaze3d/vertex/PoseStack;Lnet/minecraft/client/renderer/MultiBufferSource;I)V", at = @At(value = "HEAD"))
    private void render(PrimedTnt primedTnt, float f, float g, PoseStack poseStack, MultiBufferSource multiBufferSource, int i, CallbackInfo ci) {
        renderNameTag(primedTnt, exploitation_Timer$getFormattedTime(primedTnt.getFuse()), poseStack, multiBufferSource, i, g);
    }

    @Unique
    private static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("0.00");

    @Unique
    private static Component exploitation_Timer$getFormattedTime(double ticks) {
        double seconds = ticks / 20;
        ChatFormatting format = exploitation_Timer$getChatColor(seconds);
        return Component.nullToEmpty(DECIMAL_FORMAT.format(seconds)).copy().withStyle(format);
    }

    @Unique
    private static ChatFormatting exploitation_Timer$getChatColor(double seconds) {
        if (!Minecraft.getInstance().options.chatColors().get()) {
            return ChatFormatting.WHITE;
        }
        if (seconds > 7) return ChatFormatting.DARK_AQUA;
        if (seconds > 6) return ChatFormatting.AQUA;
        if (seconds > 4) return ChatFormatting.DARK_GREEN;
        if (seconds > 3) return ChatFormatting.GREEN;
        if (seconds > 2) return ChatFormatting.GOLD;
        if (seconds > 1) return ChatFormatting.RED;
        return ChatFormatting.DARK_RED;
    }
}